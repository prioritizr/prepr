[{"path":"/articles/prepr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"prepr: Automatic Repair of Spatial Polygons","text":"prepr R R package used repair broken spatial polygons. achieve , package uses constrained triangulation approach implemented prepair C++ library (Ledoux et al. 2014). Specifically, main st_prepair() function used repair polygons.","code":""},{"path":"/articles/prepr.html","id":"tutorial","dir":"Articles","previous_headings":"","what":"Tutorial","title":"prepr: Automatic Repair of Spatial Polygons","text":"provide short tutorial showing prepr package can used repair broken polygon geometries. start , load package. also load sf package working spatial data. now show prepr package can used repair broken geometries. achieve , examine range different mechanisms polygons can broken. mechanisms, manually create broken polygon geometry based mechanism, repair geometry (using st_prepair()), compare repaired geometry original broken geometry. also confirm broken geometries indeed repaired (using sf::st_is_valid()).","code":"# load packages library(sf)    # package for working with spatial data library(prepr) # package for repairing spatial geometries"},{"path":"/articles/prepr.html","id":"a-bowtie-polygon","dir":"Articles","previous_headings":"Tutorial","what":"A ‘bowtie’ polygon","title":"prepr: Automatic Repair of Spatial Polygons","text":"","code":"# create broken polygon x <- st_as_sfc(\"POLYGON((0 0, 0 10, 10 0, 10 10, 0 0))\")  # verify that polygon is broken, and display reason why it's broken st_is_valid(x, reason = TRUE) ## [1] \"Self-intersection[5 5]\" # repair the polygon y <- st_prepair(x)  # verify that repaired polygon is NOT broken st_is_valid(y) ## [1] TRUE # visualize the polygons par(mfrow = c(1, 2), mar = c(0, 0, 2.5, 0)) plot(x, main = \"original\", col = \"#999999\") points(st_coordinates(st_cast(x, \"POINT\")), col = \"#e41a1c\", pch = 16, cex = 2) plot(y, main = \"repaired\", col = \"#999999\") points(st_coordinates(st_cast(y, \"POINT\")), col = \"#e41a1c\", pch = 16, cex = 2)"},{"path":"/articles/prepr.html","id":"square-with-wrong-orientation","dir":"Articles","previous_headings":"Tutorial","what":"Square with wrong orientation","title":"prepr: Automatic Repair of Spatial Polygons","text":"","code":"# create broken polygon x <- st_as_sfc(\"POLYGON((0 0, 0 10, 10 10, 10 0, 0 0))\")  # verify that polygon is broken, and display reason why it's broken st_is_valid(x, reason = TRUE) ## [1] \"Valid Geometry\" # repair the polygon y <- st_prepair(x)  # verify that repaired polygon is NOT broken st_is_valid(y) ## [1] TRUE # visualize the polygons par(mfrow = c(1, 2), mar = c(0, 0, 2.5, 0)) plot(x, main = \"original\", col = \"#999999\") points(st_coordinates(st_cast(x, \"POINT\")), col = \"#e41a1c\", pch = 16, cex = 2) plot(y, main = \"repaired\", col = \"#999999\") points(st_coordinates(st_cast(y, \"POINT\")), col = \"#e41a1c\", pch = 16, cex = 2)"},{"path":"/articles/prepr.html","id":"inner-ring-with-one-edge-sharing-part-of-an-edge-of-the-outer-ring","dir":"Articles","previous_headings":"Tutorial","what":"Inner ring with one edge sharing part of an edge of the outer ring","title":"prepr: Automatic Repair of Spatial Polygons","text":"","code":"# create broken polygon x <- st_as_sfc(   \"POLYGON((0 0, 10 0, 10 10, 0 10, 0 0),(5 2, 5 7, 10 7, 10 2, 5 2))\" )  # verify that polygon is broken, and display reason why it's broken st_is_valid(x, reason = TRUE) ## [1] \"Self-intersection[10 2]\" # repair the polygon y <- st_prepair(x)  # verify that repaired polygon is NOT broken st_is_valid(y) ## [1] TRUE # visualize the polygons par(mfrow = c(1, 2), mar = c(0, 0, 2.5, 0)) plot(x, main = \"original\", col = \"#999999\") points(st_coordinates(st_cast(x, \"POINT\")), col = \"#e41a1c\", pch = 16, cex = 2) plot(y, main = \"repaired\", col = \"#999999\") points(st_coordinates(st_cast(y, \"POINT\")), col = \"#e41a1c\", pch = 16, cex = 2)"},{"path":"/articles/prepr.html","id":"dangling-edge","dir":"Articles","previous_headings":"Tutorial","what":"Dangling edge:","title":"prepr: Automatic Repair of Spatial Polygons","text":"","code":"# create broken polygon x <- st_as_sfc(\"POLYGON((0 0, 10 0, 15 5, 10 0, 10 10, 0 10, 0 0))\")  # verify that polygon is broken, and display reason why it's broken st_is_valid(x, reason = TRUE) ## [1] \"Self-intersection[15 5]\" # repair the polygon y <- st_prepair(x)  # verify that repaired polygon is NOT broken st_is_valid(y) ## [1] TRUE # visualize the polygons par(mfrow = c(1, 2), mar = c(0, 0, 2.5, 0)) plot(x, main = \"original\", col = \"#999999\") points(st_coordinates(st_cast(x, \"POINT\")), col = \"#e41a1c\", pch = 16, cex = 2) plot(y, main = \"repaired\", col = \"#999999\") points(st_coordinates(st_cast(y, \"POINT\")), col = \"#e41a1c\", pch = 16, cex = 2)"},{"path":"/articles/prepr.html","id":"two-adjacent-inner-rings","dir":"Articles","previous_headings":"Tutorial","what":"Two adjacent inner rings:","title":"prepr: Automatic Repair of Spatial Polygons","text":"","code":"# create broken polygon x <- st_as_sfc(   paste(     \"POLYGON((0 0, 10 0, 10 10, 0 10, 0 0),\",     \"(1 1, 1 8, 3 8, 3 1, 1 1), (3 1, 3 8, 5 8, 5 1, 3 1))\"   ) )  # verify that polygon is broken, and display reason why it's broken st_is_valid(x, reason = TRUE) ## [1] \"Self-intersection[3 8]\" # repair the polygon y <- st_prepair(x)  # verify that repaired polygon is NOT broken st_is_valid(y) ## [1] TRUE # visualize the polygons par(mfrow = c(1, 2), mar = c(0, 0, 2.5, 0)) plot(x, main = \"original\", col = \"#999999\") points(st_coordinates(st_cast(x, \"POINT\")), col = \"#e41a1c\", pch = 16, cex = 2) plot(y, main = \"repaired\", col = \"#999999\") points(st_coordinates(st_cast(y, \"POINT\")), col = \"#e41a1c\", pch = 16, cex = 2)"},{"path":"/articles/prepr.html","id":"polygon-with-an-inner-ring-inside-another-inner-ring","dir":"Articles","previous_headings":"Tutorial","what":"Polygon with an inner ring inside another inner ring","title":"prepr: Automatic Repair of Spatial Polygons","text":"","code":"# create broken polygon x <- st_as_sfc(   paste(     \"POLYGON((0 0, 10 0, 10 10, 0 10, 0 0),\",     \"(2 8, 5 8, 5 2, 2 2, 2 8), (3 3, 4 3, 3 4, 3 3))\"   ) )  # verify that polygon is broken, and display reason why it's broken st_is_valid(x, reason = TRUE) ## [1] \"Holes are nested[3 3]\" # repair the polygon y <- st_prepair(x)  # verify that repaired polygon is NOT broken st_is_valid(y) ## [1] TRUE # visualize the polygons par(mfrow = c(1, 2), mar = c(0, 0, 2.5, 0)) plot(x, main = \"original\", col = \"#999999\") points(st_coordinates(st_cast(x, \"POINT\")), col = \"#e41a1c\", pch = 16, cex = 2) plot(y, main = \"repaired\", col = \"#999999\") points(st_coordinates(st_cast(y, \"POINT\")), col = \"#e41a1c\", pch = 16, cex = 2)"},{"path":"/articles/prepr.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"prepr: Automatic Repair of Spatial Polygons","text":"recommend citing methodology underpins prepr R package. cite work, please use: Ledoux H, Arroyo Ohori K, Meijers M (2014) triangulation-based approach automatically repair GIS polygons. Computers & Geosciences 66:121–131.","code":""},{"path":"/articles/prepr.html","id":"getting-help","dir":"Articles","previous_headings":"","what":"Getting help","title":"prepr: Automatic Repair of Spatial Polygons","text":"questions using prepr R package suggestions improving , please file issue package’s online code repository.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ahmadou Dicko. Author. Jeffrey O Hanson. Author, maintainer. Edzer Pebesma. Contributor. Ken Arroyo Ohori. Contributor, copyright holder.            https://github.com/tudelft3d/prepair Hugo Ledoux. Contributor, copyright holder.            https://github.com/tudelft3d/prepair Martijn Meijers. Contributor, copyright holder.            https://github.com/tudelft3d/prepair","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ledoux H, Arroyo Ohori K, Meijers M (2014). “triangulation-based approach automatically repair GIS polygons.” Computers & Geosciences, 66(1), 121–131. doi:10.1016/j.cageo.2014.01.009.","code":"@Article{,   title = {A triangulation-based approach to automatically repair GIS polygons},   author = {Hugo Ledoux and Ken {Arroyo Ohori} and Martijn Meijers},   year = {2014},   journal = {Computers & Geosciences},   volume = {66},   number = {1},   pages = {121--131},   doi = {https://doi.org/10.1016/j.cageo.2014.01.009}, }"},{"path":[]},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"Automatic Repair of Spatial Polygons","what":"Overview","title":"Automatic Repair of Spatial Polygons","text":"prepr R R package used repair broken spatial polygons. achieve , package uses constrained triangulation approach implemented prepair C++ library (Ledoux et al. 2014). Specifically, main st_prepair() function used repair polygons. information, please see package vignette.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"Automatic Repair of Spatial Polygons","what":"Installation","title":"Automatic Repair of Spatial Polygons","text":"latest version can installed online source code repository using following R code.","code":"if (!require(remotes)) install.packages(\"remotes\") remotes::install_github(\"prioritizr/prepr\")"},{"path":"/index.html","id":"windows","dir":"","previous_headings":"Automatic Repair of Spatial Polygons > Installation","what":"Windows","title":"Automatic Repair of Spatial Polygons","text":"Rtools software needs installed install prepr R package source. software provides system requirements rwinlib.","code":""},{"path":"/index.html","id":"ubuntu","dir":"","previous_headings":"Automatic Repair of Spatial Polygons > Installation","what":"Ubuntu","title":"Automatic Repair of Spatial Polygons","text":"gmp, mpfr, gdal libraries need installed install surveyvoi R package. recent versions Ubuntu (18.04 later), libraries available official repositories. can installed using following system commands:","code":"sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable sudo apt-get -y update sudo apt-get install libudunits2-dev libgdal-dev libgeos-dev libproj-dev libsqlite0-dev libgmp3-dev libmpfr-dev"},{"path":"/index.html","id":"linux","dir":"","previous_headings":"Automatic Repair of Spatial Polygons > Installation","what":"Linux","title":"Automatic Repair of Spatial Polygons","text":"Unix-alikes, gmp (>= 4.2.3), mpfr (>= 3.0.0), gdal (>= 2.0.1) required.","code":""},{"path":"/index.html","id":"macos","dir":"","previous_headings":"Automatic Repair of Spatial Polygons > Installation","what":"macOS","title":"Automatic Repair of Spatial Polygons","text":"gmp, mpfr, gdal libraries required. easiest way install libraries using HomeBrew. installing HomeBrew, libraries can installed using following commands system terminal:","code":"brew install pkg-config brew install gmp brew install mpfr brew install gdal"},{"path":"/index.html","id":"citation","dir":"","previous_headings":"Automatic Repair of Spatial Polygons","what":"Citation","title":"Automatic Repair of Spatial Polygons","text":"recommend citing methodology underpins prepr R package. cite work, please use: Ledoux H, Arroyo Ohori K, Meijers M (2014) triangulation-based approach automatically repair GIS polygons. Computers & Geosciences 66:121–131.","code":""},{"path":"/index.html","id":"usage","dir":"","previous_headings":"Automatic Repair of Spatial Polygons","what":"Usage","title":"Automatic Repair of Spatial Polygons","text":"provide short example showing prepr package can used repair broken polygon geometries. start , load package. also load sf package working spatial data. Next, create broken spatial polygon. Now use st_prepair() function repair broken polygon. Finally, can compare two polygons. achieve , let’s plot two polygons (shown gray) also plot vertices two polygons (shown red).  Although can see polygons (shown gray) appear visually identical, repaired polygon (y) additional vertex (red point) center ‘bowtie’. extra vertex important maintain validity fo spatial polygon. information additional examples, see package vignette.","code":"# load packages library(sf)    # package for working with spatial data library(prepr) # package for repairing spatial geometries # create broken polygon x <- st_as_sfc(\"POLYGON((0 0, 0 10, 10 0, 10 10, 0 0))\")  # verify that polygon is broken, and display reason why it's broken st_is_valid(x, reason = TRUE) ## [1] \"Self-intersection[5 5]\" # repair the polygon y <- st_prepair(x)  # verify that repaired polygon is NOT broken st_is_valid(y) ## [1] TRUE # visualize the polygons par(mfrow = c(1, 2), mar = c(0, 0, 2.5, 0)) plot(x, main = \"original\", col = \"#999999\") points(st_coordinates(st_cast(x, \"POINT\")), col = \"#e41a1c\", pch = 16, cex = 2) plot(y, main = \"repaired\", col = \"#999999\") points(st_coordinates(st_cast(y, \"POINT\")), col = \"#e41a1c\", pch = 16, cex = 2)"},{"path":"/index.html","id":"getting-help","dir":"","previous_headings":"Automatic Repair of Spatial Polygons","what":"Getting help","title":"Automatic Repair of Spatial Polygons","text":"questions using prepr R package suggestions improving , please file issue package’s online code repository.","code":""},{"path":"/reference/prepr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"A package for automatically repairing broken polygons — prepr-package","title":"A package for automatically repairing broken polygons — prepr-package","text":"package contains functions repair single polygons according international standards ISO 19107 using constrained triangulation approach. based prepair C++ tool.","code":""},{"path":[]},{"path":"/reference/prepr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A package for automatically repairing broken polygons — prepr-package","text":"Maintainer: Jeffrey O Hanson jeffrey.hanson@uqconnect.edu.au (ORCID) Authors: Ahmadou Dicko mail@ahmadoudicko.com contributors: Edzer Pebesma edzer.pebesma@uni-muenster.de (ORCID) [contributor] Ken Arroyo Ohori g..k.arroyoohori@tudelft.nl (https://github.com/tudelft3d/prepair) [contributor, copyright holder] Hugo Ledoux h.ledoux@tudelft.nl (https://github.com/tudelft3d/prepair) [contributor, copyright holder] Martijn Meijers b.m.meijers@tudelft.nl (https://github.com/tudelft3d/prepair) [contributor, copyright holder]","code":""},{"path":"/reference/st_prepair.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic repair of polygon geometries — st_prepair","title":"Automatic repair of polygon geometries — st_prepair","text":"Repair polygon geometries according international standards ISO 19107 using constrained triangulation approach (van Oosterom et al. 2005; Ledoux et al. 2014)","code":""},{"path":"/reference/st_prepair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic repair of polygon geometries — st_prepair","text":"","code":"st_prepair(x)"},{"path":"/reference/st_prepair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic repair of polygon geometries — st_prepair","text":"x sf::st_sf(), sf::st_sfc() sfg object (containing POLYGON MULTIPOLYGON geometries).","code":""},{"path":"/reference/st_prepair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic repair of polygon geometries — st_prepair","text":"sf::st_sf(), sf::st_sfc() sfg object (argument x).","code":""},{"path":"/reference/st_prepair.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Automatic repair of polygon geometries — st_prepair","text":"function supports two algorithms: oddeven: extension odd-even algorithm handle polygons containing inner rings degeneracies; setdiff: one follow point set difference rule rings (outer - inner).","code":""},{"path":"/reference/st_prepair.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Automatic repair of polygon geometries — st_prepair","text":"Ledoux H, Arroyo Ohori K, Meijers M (2014) triangulation-based approach automatically repair GIS polygons. Computers & Geosciences 66:121--131. van Oosterom P, Quak W, Tijssen T (2005) Invalid, Valid Clean Polygons : Developments Spatial Data Handling. Springer, Berlin, Heidelberg","code":""},{"path":[]},{"path":"/reference/st_prepair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic repair of polygon geometries — st_prepair","text":"","code":"# \\dontrun{ # create an object containing a broken polygon geometry x <- sf::st_as_sfc(\"POLYGON((0 0, 0 10, 10 0, 10 10, 0 0))\")  # check if this polygon is indeed broken sf::st_is_valid(x) #> [1] FALSE  # repair the polygon y <- st_prepair(x) #> Linking to GEOS 3.11.1, GDAL 3.6.4, PROJ 9.3.1; sf_use_s2() is TRUE  # check that the repaired polygon has been fixed print(st_is_valid(y)) #> [1] TRUE # }"},{"path":"/news/index.html","id":"prepr-030","dir":"Changelog","previous_headings":"","what":"prepr 0.3.0","title":"prepr 0.3.0","text":"Fix installation M1 Mac systems. Fix compatibility issues updates BH package. achieved linking RcppCGAL package (instead cgal4h package).","code":""},{"path":"/news/index.html","id":"prepr-019000","dir":"Changelog","previous_headings":"","what":"prepr 0.1.9000","title":"prepr 0.1.9000","text":"Initial version (available https://dickoa.gitlab.io/prepair/).","code":""}]
